//- {"title":"Setting up an HTTPS site using Nodejs, AWS EC2, Nginx, Let's Encrypt, and Namecheap", "author": "zeevo", "twitter":"@zeevosec", "date":"07/12/2018", "tagline": "The definitive guide to getting HTTPS for your site.", "keywords": "https,aws,ec2,nginx,letsencrypt,namecheap", "url": "setting-up-https-with-node-aws-letsencrypt", "summary":"", "category":"programming"}
extends ../post
include ../authors/avis
include ../utils
block header
  h1=post.title 
  .tagline=post.tagline
block meta
  - var date = moment(post.date).format('MMMM Do, YYYY');
  +zeevo_avi(date)
block article
  i beginning taken from 
    a(href='/posts/deploy-node-project-to-aws') from previous blog
  h2 1. Create an AWS EC2 instance
  p Log into 
    a(href="https://aws.amazon.com/") AWS 
    | and create an account if you don't have one already. Log in and you should see your dashboard, or a list
    | of services
  +limg('/img/posts/6-a.png')
  p Select EC2. Then select Launch Instance.
  +limg('/img/posts/6-b.png')
  p If you're just prototyping a simple website then choosing the latest Ubuntu Server image is fine.
    |  Make sure to save your private key somewhere safe.

  h2 2. Connecting to your EC2 instance
  p Test your new EC2 instance by connecting to it.
  code ssh -i keyname.pem user@your-ec2-address
  p Or press the Connect button while on your EC2 console for exact instructions.
  p Your ec2 address looks something like 
    code ec2-55-55-555-55.xx-yyyy-5.compute.amazonaws.com
  p Success? Great good to go!
  h2 3. Setup your Security Groups
  p Let's open up some ports so requests can make it to our VM. At the AWS Dashboard, find the link to "Security Groups" on the left
  +limg('/img/posts/6-c.png') 
  p Then click "Create"
  +limg('/img/posts/6-e.png') 
  p Make the following rules
  +limg('/img/posts/6-d.png') 
  p Click the "Create" button in the bottom right. 
    | Next, go back to "Instances" and under "Actions" select "Networking"->"Change Security Groups" and 
    | select your newly created security group. Mine was called something like 
    i launch-wizard-1
    | . Remember to click "Assign Security Groups" after you
    | check the box.

  h2 4. Create your Elastic IP
  p This allows for better DNS.
  +limg('/img/posts/6-f.png')
  p Click the blue "Allocate new address" button, then select "Allocate". 
    | Next, select the created Elastic IP and select "Actions"->"Associate".
    | Then select your EC2 Instance. It's that easy.
  h2 5. Create and configure a Hosted Zone
  p We will use the Route 53 service for this. Select it from the Services menu.
  +limg('/img/posts/6-g.png')
  p Select "Create Hosted Zone"
  +limg('/img/posts/6-h.png')
  p Hit "Create". Back at the Route 53 Dashboard, select the created Hosted Zone and click "Go to Record Sets".
    | Click "Create Record Set", leave the Name field blank, and place your Elastic IP into the Value field. Then, hit Create.
  p Hit "Create Record Set" again. Put "www" in the Name field, and place your Elastic IP into the Value field. Then, hit Create.
  p Next, click the #[strong Go to Record Sets] button. Take the dns servers in the #[strong Values] column of your NS record...
  +limg('/img/posts/6-j.png')
  p And set your Namecheap DNS servers to them. (without the period at the end)
  +limg('/img/posts/6-i.png')
  h2 6. Set up Nginx
  p Right. Now lets ssh into our EC2 instance and setup the 
    a(href='https://www.nginx.com/blog/setting-up-nginx/') Nginx webserver.
  pre
    code
      | sudo apt-get install nginx
  p Navigating to your Elastic IP, you will see the default Nginx page.
  p Next, let's setup Let's Encrypt using 
    a(href='https://certbot.eff.org/') Certbot
  pre
    code
      | apt-get update
      | apt-get install software-properties-common
      | add-apt-repository ppa:certbot/certbot
      | apt-get update
      | apt-get install python-certbot-nginx
  p Let's edit our nginx config before creating a certificate.
  pre
    code
      | 
  h2 7. Run your App!
  h4 
    a(href='/posts/deploy-node-project-to-aws') Checkout the previous blog on how to set up easy deployment!
