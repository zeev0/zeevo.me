//- {"title":"How to deploy your Node project to AWS EC2 easily", "author":"shaneoneill", "twitter":"@zeevosec", "date":"05/29/2018", "tagline": "Dead simple setup that allows for rapid deployment. Great for prototyping.", "keywords": "aws,node,nodejs,github", "url": "deploy-node-project-to-aws", "summary":"", "category":"films"}
extends ../post
include ../authors/avis
include ../utils
block header
  h1=post.title 
  .tagline=post.tagline
block meta
  - var date = moment(post.date).format('MMMM Do, YYYY');
  +zeevo_avi(date)
block article

  h2 1. Create an AWS EC2 instance
  p Log into 
    a(href="https://aws.amazon.com/") AWS 
    | and create an account if you don't have one already. Log in and you should see your dashboard, or a list
    | of services
  img(src='/img/posts/6-a.png')
  p Select EC2. Then select Launch Instance.
  img(src='/img/posts/6-b.png')
  p If you're just prototyping a simple website then choosing the latest Ubuntu Server image is fine.
    |  Make sure to save your private key somewhere safe.

  h2 2. Connecting to your EC2 instance
  p Test your new EC2 instance by connecting to it.
  code ssh -i keyname.pem user@your-ec2-address
  p Or press the Connect button while on your EC2 console for exact instructions.
  p Your ec2 address looks something like 
    code ec2-55-55-555-55.xx-yyyy-5.compute.amazonaws.com

  h2 3. Copy your git repo to your EC2 instance
  p
    code scp -i yourkey.pem -r yourproject your-user@your-ec2-address:~
  p If you chose the Ubuntu Server image, your user is
    code ubuntu
    | by default. Don't forget the 
    code :~
    |  at the end.

  h2 4. Configure your "push" git repo on AWS
  p
    div
      code ssh -i yourkey.pem -your-user@your-ec2-address
    div
      code git clone --bare yourproject yourproject.git
  p You now have a copy of the git repo you originally pushed. Now configure your original to pull from it.
    div
      code cd yourproject
    div
      code git remote set-url origin ../yourproject.git
  h2 5. Configure your local repository to push to your AWS repo
  p Add the following your ssh config
  pre
    code
      | Host aws
      |     HostName your-ec2-address
      |     User ubuntu
      |     IdentityFile /home/you/.ssh/yourkey.pem # or preferably somewhere much safer
      |     IdentitiesOnly yes
  p Now set your local repository to also push to your AWS repository
  div
    code git remote set-url --add --push origin aws:yourproject.git
  h2 6. Deployment scripts
  p Use scripts to bootstrap your application
  p
    div
      code cd yourproject
    div
      code mkdir deploy
    div
      code cd deploy
    div
      code touch deploy.sh runner.sh
  i deploy.sh
  pre
    code
      | #!/bin/bash
      | set -e
      | 
      | ### Configuration ###
      | ### Change me! ###
      | 
      | USER=ubuntu
      | SERVER=$USER@your-ec2-address
      | REMOTE_SCRIPT_PATH=/tmp/runner.sh
      | APP_DIR=~/yourproject
      | GIT_URL=~/yourproject.git
      | IDENTITY_FILE=yourkey.pem
      | 
      | function run()
      | {
      |   echo "Running: $@"
      |   "$@"
      | }
      | 
      | ### Automation steps ###
      | 
      | run scp -i deploy/$IDENTITY_FILE deploy/runner.sh $SERVER:$REMOTE_SCRIPT_PATH
      | echo
      | echo "---- Running deployment script on remote server ----"
      | run ssh -i $IDENTITY_FILE $SERVER bash $REMOTE_SCRIPT_PATH

  i runner.sh
  pre
    code
      | #!/bin/bash
      | 
      | set -e
      | 
      | ### Configuration ###
      | ### Change me for your app! ###
      | 
      | APP_DIR=~/yourproject
      | GIT_URL=~/yourproject.git
      | USER=ubuntu 
      |
      | set -x
      | 
      | # Pull latest code
      | if [[ -e $APP_DIR ]]; then
      |   cd $APP_DIR
      |   git pull
      | else
      |   git clone $GIT_URL $APP_DIR
      |   cd $APP_DIR/
      | fi
      | 
      | # Install dependencies
      | npm install --production
      | npm prune --production
      | 
      | # Start your app
      | # I like to run it in a tmux session so I can view logging if necessary
      | set +e
      | if tmux info &> /dev/null; then 
      |   tmux kill-session -t "yourproject"
      | fi
      | set -e
      | 
      | tmux new-session -d -s "yourproject" "npm run prod"
  p
    | Add a npm script for easy usage
  i package.json
  pre
    code
      | {
      |   "name": "yourproject",
      |   "version": "0.0.0",
      |   "scripts": {
      |     "start": "node ./bin/www",
      |     "prod": "export NODE_ENV=production && node ./bin/www",
      |     "dev": "export NODE_ENV=development && node ./bin/www",
      |     "deploy": "bash deploy/deploy.sh"
      |   },
      |  ...
  h2 7. Commit and push everything
  p
    code git add package.json deploy/runner.sh deploy/deploy.sh
  p
    code git commit -m 'Add deployment scripts'
  p
    code git push origin master
  h2 8. Deploy!
  p
    code npm run deploy
